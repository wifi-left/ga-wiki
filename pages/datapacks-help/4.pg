上一期：Minecraft 制作数据包教程（No.3）—— 指令（包含新旧指令替换）

本期是讲关于Minecraft JSON文本的教程。


一、认识Minecraft 聊天器（原始JSON文本格式）。
1.什么是JSON文本？

就是像 {"text":"1"} 之类的 JSON 文本。

什么，不会JSON？

没事，我教你。




首先，JSON可以识别的括号有：[] {} 。所以JSON一般以 [ 或者 { 这两者开头。

JSON一般用于网络传输，像XML一样的功能（但貌似比XML方便）。


{} 一般中间是 名称:值 的形式。

例如：

{"Hi":"I am your friend."}
名称为"Hi"，值为"I am your friend."。

值得注意的是，文本内容需要加上引号（必须），至于数字和逻辑型（下文会讲到），要看解析的程序支不支持转换类型。Minecraft解析是支持转换的，所以不必太在意。

当然可以不止一对，可以有多对，用","分割开来。

例如：

{"Hi":"1","Im":"2"}
值还支持JSON文本。例如：

{"Name-Root":{"Name-#1":"Value"}}


当然，在一个同级下，名称不能重复。

什么是同级？

例如：

{"1":"2","2":"3","3":{"4":"万物"}}
"1":"2","2":"3","3":{...} 就属于一级。

"4":"万物" 就又属于一级。

例如：

{"1":"1","1":"2"}
有些程序会直接报错，有些读取出来只会读取2。

但如果不是同级，就可以。

例如：

{"1":{"1":"2"}}



[] 一般括起来的文本为数组。

就像是一系列的数字、文本等。

例如：

一串数字组合：1 2 3 4，放到JSON中：

[1,2,3,4]
一串字符串： 我, 很, 帅 ，放入即为：

["我","很","帅"]
一串逻辑型文本（就当做只有 0 （false）和 1（true）的数字）：

true false true false，放入即为：

[true,false,true,false]
当然不止这些类型，也支持JSON文本。这就能和前面的进行嵌套。

例如：

{"Grand Grand Root":{"Grand Root":[{"Root":"Son"},"嘿",100,false]}}
当然数组里也能包含其他类型（看具体程序的JSON解释）。




在Minecraft中，聊天文本的传输一般使用的是JSON文本。

Minecraft中，开头一般有下面3种形式：

1.

"1"
2.

{"text":"1"}
3.

[{"text":"1"}]
这有什么区别呢？第1、2种只能有一个JSON文本，第3种可以加多个。


Minecraft 聊天文本的常用类型参数名有以下几个：

No.1 text - 文本。例如：

{"text":"内容"}
将显示“内容”。

No.2 selector - 显示玩家名字（鼠标移上去可以查看玩家信息）

例如：

{"selector":"@s"}
将会输出你的名字（如果可用）。

若有多个名字，MC将会以 A , B , and C 的形式出现。

No.3 translate - 本地化文本。

一般用于MC内部使用。

在后面使用with对其中的“%s”文本进行修改。

语言文件可以在MC资源文件中的"lang"查看。

例如：

{"translate":"multiplayer.player.joined","with":["我"]}
如果您的语言是中文简体（zh_cn），将会显示：

我加入了游戏
（又一个坑人小妙招呢！）

No.4 score - 显示计分板分数。

格式为：

{"score":{"objective":"计分板名称","name":"计分板对象，使用*代表所有看到这条信息的人的分数（仅自己的）。","value":"默认显示值（一般不加）"}}
其中value在用指令输出时推荐不加。

因为一旦使用value，输出的值即为定值，即value内的值。

value一般用于MC服务器发送给客户端时使用。

接下来是更高级的类型：

No.5  keybind - 键位标识符

会显示某操作当前绑定的按钮的名称。例如，若使用默认配置，

{"keybind": "key.inventory"}
将显示“e”。

No.6  nbt - 包含一段NBT路径的字符串。

用于从实体、方块或存储处查找指定NBT数据标签的值。

若值为字符串，则显示它的内容；其他值将显示为SNBT，没有空格和换行符。

若发现多个值（通常由选择了多个对象或路径会选择多个值造成），则会显示所有值，之间用半角逗号分隔。需要同时存在block、entity或storage。含有多个组件是允许的，但只会有一个生效。



interpret - 用于表示是否解析NBT字符串。

默认为“false”。若指定为“true”，则会尝试将获取到的每个值视为原始JSON文本聊天对象并解析。若解析失败，则不会显示任何内容。



你会发现：为什么所有文本都是白色的啊！明明Minecraft的文本那么多颜色！

别着急，下面就来讲这些。


Minecraft 常用的修饰文本：

No.1 color - 用于修改显示的文本。 

No.2 文本特殊效果：

bold- 是否将文字渲染为粗体。

italic - 是否将文字渲染为斜体。

underlined - 是否为文字附加下划线。

strikethrough - 是否为文字附加删除线。

obfuscated - 是否将文字模糊处理（这个可以自己试试，用于装饰还是不错的）。

No.3 font - 指定字体。

众所周知，MC中有Unicode字体、原始Minecraft字体、附魔字体等。

此选项可以选择用的字体。

可在资源文件中的 assets/<namespace>/font 查看。


交互事件：

clickEvent - 允许在玩家点击文字时产生事件。

hoverEvent - 允许在玩家将鼠标指针悬浮在文字之上时显示提示文字。

其值为JSON文本。

值的列表有：

action - 文字动作的类型

value - 上面的文字动作去干什么由这个决定。

更多高级用法：

https://minecraft-zh.gamepedia.com/%E5%8E%9F%E5%A7%8BJSON%E6%96%87%E6%9C%AC%E6%A0%BC%E5%BC%8F#Java.E7.89.88




你可能会说，这么写起来好麻烦！
其实有更简单的方法来修饰文本。

例如：

No.1

{"text":"1","color":"red"}
等价于

No.2

{"text":"\u00a7c1"}
也等价于

No.3

["\u00a7c1"]
可能有人会问\u00a7c是啥？

\u00a7是 §（按下ALT+小键盘0+1+6+7可以打出来） 的U码。

MC的显示支持 §。

他的修饰：


                                                                              ——来自 Minecraft Wiki

所以，我推荐没有特殊事件的文本用第三种，有特殊事件的文本用第二种。


感谢您的观看，下期再见~



